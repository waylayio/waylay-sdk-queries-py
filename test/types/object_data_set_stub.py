# coding: utf-8
"""Waylay Query: timeseries queries (v1 protocol) model tests.

This code was generated from the OpenAPI documentation of 'Waylay Query: timeseries queries (v1 protocol)'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.queries.models.object_data_set import ObjectDataSet

    ObjectDataSetAdapter = TypeAdapter(ObjectDataSet)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

object_data_set_model_schema = json.loads(
    r"""{
  "required" : [ "data" ],
  "type" : "object",
  "properties" : {
    "attributes" : {
      "$ref" : "#/components/schemas/DataSetAttributes"
    },
    "window_spec" : {
      "$ref" : "#/components/schemas/DataSetWindow"
    },
    "data" : {
      "title" : "Data",
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/ObjectData"
      }
    }
  },
  "additionalProperties" : true,
  "description" : "Data result in object format.\n\nResult item when render option `render.header_array` is not set.\n\nThe data values are keyed by their attributes (`resource`, `metric`, `aggregation`),\naccording to the render options:\n* _hierachical_: for each level, a sub-object is created\n  (e.g. `render.mode=hier_dict`)\n* _flattened_: the attributes are '.'-separated concatenation\n  of the attributes (e.g `render.mode=flat_dict`)\n* _mixed_: (.e.g. `render.mode=metric_flat_dict`) a single level\n    (e.g. `metric`) is used as main key, any remaining levels\n    (`resource`,`aggregation`) are indicated with a flattened subkey.\n\nWhen `render.rollup=true`, the attribute levels that are the same for all series are\nnot used as key, but reported as a data or table attribute."
}
""",
    object_hook=with_example_provider,
)
object_data_set_model_schema.update({"definitions": MODEL_DEFINITIONS})

object_data_set_faker = JSF(object_data_set_model_schema, allow_none_optionals=1)


class ObjectDataSetStub:
    """ObjectDataSet unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return object_data_set_faker.generate(use_defaults=True, use_examples=True)

    @classmethod
    def create_instance(cls) -> "ObjectDataSet":
        """Create ObjectDataSet stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if json is None:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                ObjectDataSetAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return ObjectDataSetAdapter.validate_python(
            json, context={"skip_validation": True}
        )
