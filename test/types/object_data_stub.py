# coding: utf-8
"""Waylay Query: timeseries queries (v1 protocol) model tests.

This code was generated from the OpenAPI documentation of 'Waylay Query: timeseries queries (v1 protocol)'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.queries.models.object_data import ObjectData

    ObjectDataAdapter = TypeAdapter(ObjectData)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

object_data_model_schema = json.loads(
    r"""{
  "required" : [ "timestamp" ],
  "type" : "object",
  "properties" : {
    "timestamp" : {
      "$ref" : "#/components/schemas/Timestamp"
    },
    "timestamp_iso" : {
      "$ref" : "#/components/schemas/TimestampIso"
    },
    "role" : {
      "$ref" : "#/components/schemas/Role"
    },
    "resource" : {
      "title" : "Resource",
      "type" : "string",
      "description" : "Series resource id, if applicable for all values."
    },
    "metric" : {
      "title" : "Metric",
      "type" : "string",
      "description" : "Series metric, if applicable for all values."
    },
    "aggregation" : {
      "title" : "Aggregation",
      "type" : "string",
      "description" : "Series aggregation, if applicable for all values."
    },
    "levels" : {
      "title" : "Hierarchical Levels",
      "type" : "array",
      "description" : "Attribute level names used to key the values for this observation.\n\nLevels that are flattened have a dot-separated key.\n\nIf all observations have the same attribute for a level, that level might be omitted.",
      "example" : [ "resource", "metric", "aggregation" ],
      "items" : {
        "type" : "string"
      }
    }
  },
  "additionalProperties" : {
    "$ref" : "#/components/schemas/Data_"
  },
  "description" : "Result data for a timestamp in object format."
}
""",
    object_hook=with_example_provider,
)
object_data_model_schema.update({"definitions": MODEL_DEFINITIONS})

object_data_faker = JSF(object_data_model_schema, allow_none_optionals=1)


class ObjectDataStub:
    """ObjectData unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return object_data_faker.generate(use_defaults=True, use_examples=True)

    @classmethod
    def create_instance(cls) -> "ObjectData":
        """Create ObjectData stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if json is None:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(ObjectDataAdapter.json_schema(), allow_none_optionals=1)
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return ObjectDataAdapter.validate_python(
            json, context={"skip_validation": True}
        )
