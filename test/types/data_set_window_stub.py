# coding: utf-8
"""Waylay Query: timeseries queries (v1 protocol) model tests.

This code was generated from the OpenAPI documentation of 'Waylay Query: timeseries queries (v1 protocol)'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.queries.models.data_set_window import DataSetWindow

    DataSetWindowAdapter = TypeAdapter(DataSetWindow)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

data_set_window_model_schema = json.loads(
    r"""{
  "title" : "DataSetWindow",
  "required" : [ "freq", "until", "window" ],
  "type" : "object",
  "properties" : {
    "until" : {
      "title" : "Time Axis End",
      "type" : "integer",
      "description" : "Exclusive higher bound of the time axis in unix epoch milliseconds."
    },
    "window" : {
      "title" : "Time Axis Length",
      "type" : "string",
      "description" : "Time axis length as ISO8601 period.",
      "format" : "period"
    },
    "freq" : {
      "title" : "Frequency",
      "type" : "string",
      "description" : "Time axis aggregation interval as an ISO8601 period .",
      "format" : "period"
    }
  },
  "additionalProperties" : true,
  "description" : "Data Window.\n\nStatistics of the time axis of a data set.\nPresent with render option `include_window_spec=true`.\","
}
""",
    object_hook=with_example_provider,
)
data_set_window_model_schema.update({"definitions": MODEL_DEFINITIONS})

data_set_window_faker = JSF(data_set_window_model_schema, allow_none_optionals=1)


class DataSetWindowStub:
    """DataSetWindow unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return data_set_window_faker.generate(use_defaults=True, use_examples=True)

    @classmethod
    def create_instance(cls) -> "DataSetWindow":
        """Create DataSetWindow stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if json is None:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                DataSetWindowAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return DataSetWindowAdapter.validate_python(
            json, context={"skip_validation": True}
        )
