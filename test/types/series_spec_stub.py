# coding: utf-8
"""Waylay Query: timeseries queries (v1 protocol) model tests.

This code was generated from the OpenAPI documentation of 'Waylay Query: timeseries queries (v1 protocol)'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.queries.models.series_spec import SeriesSpec

    SeriesSpecAdapter = TypeAdapter(SeriesSpec)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

series_spec_model_schema = json.loads(
    r"""{
  "title" : "SeriesSpec",
  "type" : "object",
  "properties" : {
    "name" : {
      "title" : "Name",
      "type" : "string",
      "description" : "Optional alias name for the series. This name is used when exporting the dataset to CSV format.",
      "example" : "demoQuery"
    },
    "resource" : {
      "title" : "Resource",
      "type" : "string",
      "description" : "Resource id for the series, required unless it is specified as a query default.",
      "example" : "13efb488-75ac-4dac-828a-d49c5c2ebbfc"
    },
    "metric" : {
      "title" : "Metric",
      "type" : "string",
      "description" : "Metric name for the series, required unless it is specified as a query default.",
      "example" : "temperature"
    },
    "aggregration" : {
      "$ref" : "#/components/schemas/AggregationMethod"
    },
    "interpolation" : {
      "$ref" : "#/components/schemas/Interpolation"
    }
  },
  "additionalProperties" : true,
  "description" : "Query specification for a single series."
}
""",
    object_hook=with_example_provider,
)
series_spec_model_schema.update({"definitions": MODEL_DEFINITIONS})

series_spec_faker = JSF(series_spec_model_schema, allow_none_optionals=1)


class SeriesSpecStub:
    """SeriesSpec unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return series_spec_faker.generate(use_defaults=True, use_examples=True)

    @classmethod
    def create_instance(cls) -> "SeriesSpec":
        """Create SeriesSpec stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if not json:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(SeriesSpecAdapter.json_schema(), allow_none_optionals=1)
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return SeriesSpecAdapter.validate_python(
            json, context={"skip_validation": True}
        )
