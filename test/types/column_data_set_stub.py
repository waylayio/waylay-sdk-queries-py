# coding: utf-8
"""Waylay Query: timeseries queries (v1 protocol) model tests.

This code was generated from the OpenAPI documentation of 'Waylay Query: timeseries queries (v1 protocol)'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.queries.models.column_data_set import ColumnDataSet

    ColumnDataSetAdapter = TypeAdapter(ColumnDataSet)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

column_data_set_model_schema = json.loads(
    r"""{
  "required" : [ "data", "rows" ],
  "type" : "object",
  "properties" : {
    "attributes" : {
      "$ref" : "#/components/schemas/DataSetAttributes"
    },
    "window_spec" : {
      "$ref" : "#/components/schemas/DataSetWindow"
    },
    "data_axis" : {
      "$ref" : "#/components/schemas/ColumnDataSet_data_axis"
    },
    "rows" : {
      "title" : "Row Headers",
      "type" : "array",
      "description" : "Header Attributes for the index data.\n\nThe initial string-valued headers (normally `resource`, `metric`,`aggregation`) indicate that row to contain series attributes.\n\nThe remaining object-valued row headers contain the index data.",
      "items" : {
        "$ref" : "#/components/schemas/Row_Headers_inner"
      }
    },
    "data" : {
      "title" : "Series",
      "type" : "array",
      "description" : "All metric observation values for a single series. Prefixed by the series attributes.",
      "items" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Datum"
        }
      }
    }
  },
  "additionalProperties" : true,
  "description" : "Column-oriented dataset with rows header.\n\nTimeseries data layout with a rows header containing\nthe index data.\nThe data array contains series data prefixed by series attributes.\nThe `rows` index is prefix by the names of these series attributes.\nResult for render options `data_axis=row` and `header_array=column`."
}
""",
    object_hook=with_example_provider,
)
column_data_set_model_schema.update({"definitions": MODEL_DEFINITIONS})

column_data_set_faker = JSF(column_data_set_model_schema, allow_none_optionals=1)


class ColumnDataSetStub:
    """ColumnDataSet unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return column_data_set_faker.generate(use_defaults=True, use_examples=True)

    @classmethod
    def create_instance(cls) -> "ColumnDataSet":
        """Create ColumnDataSet stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if not json:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                ColumnDataSetAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return ColumnDataSetAdapter.validate_python(
            json, context={"skip_validation": True}
        )
