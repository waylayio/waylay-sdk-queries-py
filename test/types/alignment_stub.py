# coding: utf-8
"""Waylay Query: timeseries queries (v1 protocol) model tests.

This code was generated from the OpenAPI documentation of 'Waylay Query: timeseries queries (v1 protocol)'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.queries.models.alignment import Alignment

    AlignmentAdapter = TypeAdapter(Alignment)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

alignment_model_schema = json.loads(
    r"""{
  "type" : "object",
  "properties" : {
    "at" : {
      "$ref" : "#/components/schemas/AlignAt"
    },
    "shift" : {
      "$ref" : "#/components/schemas/AlignShift"
    },
    "freq" : {
      "$ref" : "#/components/schemas/Alignment_Grid_interval_"
    },
    "timezone" : {
      "$ref" : "#/components/schemas/Alignment_Timezone_"
    }
  },
  "additionalProperties" : true,
  "description" : "Aggregation Alignment Options.\n\nSpecifies how the aggregation grid is aligned."
}
""",
    object_hook=with_example_provider,
)
alignment_model_schema.update({"definitions": MODEL_DEFINITIONS})

alignment_faker = JSF(alignment_model_schema, allow_none_optionals=1)


class AlignmentStub:
    """Alignment unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return alignment_faker.generate(use_defaults=True, use_examples=True)

    @classmethod
    def create_instance(cls) -> "Alignment":
        """Create Alignment stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if not json:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(AlignmentAdapter.json_schema(), allow_none_optionals=1)
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return AlignmentAdapter.validate_python(json, context={"skip_validation": True})
