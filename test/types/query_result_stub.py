# coding: utf-8
"""Waylay Query: timeseries queries (v1 protocol) model tests.

This code was generated from the OpenAPI documentation of 'Waylay Query: timeseries queries (v1 protocol)'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.queries.models.query_result import QueryResult

    QueryResultAdapter = TypeAdapter(QueryResult)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

query_result_model_schema = json.loads(
    r"""{
  "required" : [ "data", "messages", "query" ],
  "type" : "object",
  "properties" : {
    "data" : {
      "title" : "Response Data Sets",
      "type" : "array",
      "description" : "A list of data sets, each with their own time axis. There will be one dataset for each `role` specified in the query (by default a single `input` role).\n\nThe data is represented according to the `render`  options in the query (default `COMPACT_WS`).",
      "items" : {
        "$ref" : "#/components/schemas/Response_Data_Set"
      }
    },
    "query" : {
      "$ref" : "#/components/schemas/Query-Input"
    },
    "messages" : {
      "title" : "Messages and Warnings",
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/QueryExecutionMessage"
      }
    }
  },
  "additionalProperties" : true,
  "description" : "A json data response.\n\nUses the format as specified by the\n`render` options of the request (defaults to `COMPACT_WS`).\n'",
  "example" : {
    "data" : [ ],
    "query" : {
      "resource" : "R",
      "metric" : "temperature"
    },
    "messages" : [ ]
  }
}
""",
    object_hook=with_example_provider,
)
query_result_model_schema.update({"definitions": MODEL_DEFINITIONS})

query_result_faker = JSF(query_result_model_schema, allow_none_optionals=1)


class QueryResultStub:
    """QueryResult unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return query_result_faker.generate(use_defaults=True, use_examples=True)

    @classmethod
    def create_instance(cls) -> "QueryResult":
        """Create QueryResult stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if json is None:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(QueryResultAdapter.json_schema(), allow_none_optionals=1)
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return QueryResultAdapter.validate_python(
            json, context={"skip_validation": True}
        )
