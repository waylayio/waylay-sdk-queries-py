# coding: utf-8
"""Waylay Query: timeseries queries (v1 protocol) model tests.

This code was generated from the OpenAPI documentation of 'Waylay Query: timeseries queries (v1 protocol)'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.queries.models.message import Message

    MessageAdapter = TypeAdapter(Message)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

message_model_schema = json.loads(
    r"""{
  "title" : "Message",
  "required" : [ "message" ],
  "type" : "object",
  "properties" : {
    "code" : {
      "title" : "code",
      "type" : "string",
      "nullable" : true
    },
    "message" : {
      "title" : "Message",
      "type" : "string"
    },
    "level" : {
      "$ref" : "#/components/schemas/Message_level"
    },
    "args" : {
      "title" : "args",
      "type" : "object",
      "nullable" : true
    }
  },
  "description" : "Individual (info/warning/error) message in a response."
}
""",
    object_hook=with_example_provider,
)
message_model_schema.update({"definitions": MODEL_DEFINITIONS})

message_faker = JSF(message_model_schema, allow_none_optionals=1)


class MessageStub:
    """Message unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return message_faker.generate(use_defaults=True, use_examples=True)

    @classmethod
    def create_instance(cls) -> "Message":
        """Create Message stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if json is None:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(MessageAdapter.json_schema(), allow_none_optionals=1)
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return MessageAdapter.validate_python(json, context={"skip_validation": True})
