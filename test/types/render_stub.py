# coding: utf-8
"""Waylay Query: timeseries queries (v1 protocol) model tests.

This code was generated from the OpenAPI documentation of 'Waylay Query: timeseries queries (v1 protocol)'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.queries.models.render import Render

    RenderAdapter = TypeAdapter(Render)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

render_model_schema = json.loads(
    r"""{
  "title" : "Render",
  "type" : "object",
  "properties" : {
    "mode" : {
      "$ref" : "#/components/schemas/_RenderMode"
    },
    "roll_up" : {
      "title" : "Roll Up",
      "type" : "boolean",
      "description" : "move up attributes on rows (or columns) that are the same for             all rows (or columns) to a table attribute.             Levels enumerated in 'hierarchical' are excluded."
    },
    "hierarchical" : {
      "$ref" : "#/components/schemas/Hierarchical"
    },
    "value_key" : {
      "title" : "Value Key",
      "type" : "string",
      "description" : "if set, use this key in the value object to report data values"
    },
    "show_levels" : {
      "title" : "Show Levels",
      "type" : "boolean",
      "description" : "if set, report the levels used in the data values (either hierarchical or flat)"
    },
    "iso_timestamp" : {
      "title" : "Iso Timestamp",
      "type" : "boolean",
      "description" : "if set, render timestamps in a row or column index with both epoch and iso representations"
    },
    "row_key" : {
      "title" : "Row Key",
      "type" : "string",
      "description" : "if set, use this key as name of the row-dimension for single-dimensional rows"
    },
    "column_key" : {
      "title" : "Column Key",
      "type" : "string",
      "description" : "if set, use this key as name of the column-dimension for single-dimensional columns"
    },
    "header_array" : {
      "$ref" : "#/components/schemas/HeaderArrayOption"
    },
    "data_axis" : {
      "$ref" : "#/components/schemas/DataAxisOption"
    },
    "key_seperator" : {
      "title" : "Key Seperator",
      "type" : "string",
      "description" : "character used to concatenate multi-key columns or rows when required"
    },
    "key_skip_empty" : {
      "title" : "Key Skip Empty",
      "type" : "boolean",
      "description" : "skip empty values in concatenating multi-key column or row headers"
    },
    "include_window_spec" : {
      "title" : "Include Window Spec",
      "type" : "boolean",
      "description" : "if set, include window specification in render modes that support it"
    }
  },
  "additionalProperties" : true,
  "description" : "Configures the representation of data sets returned by the query API."
}
""",
    object_hook=with_example_provider,
)
render_model_schema.update({"definitions": MODEL_DEFINITIONS})

render_faker = JSF(render_model_schema, allow_none_optionals=1)


class RenderStub:
    """Render unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return render_faker.generate(use_defaults=True, use_examples=True)

    @classmethod
    def create_instance(cls) -> "Render":
        """Create Render stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if json is None:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(RenderAdapter.json_schema(), allow_none_optionals=1)
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return RenderAdapter.validate_python(json, context={"skip_validation": True})
