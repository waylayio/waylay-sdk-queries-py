# coding: utf-8
"""Waylay Query: timeseries queries (v1 protocol) api tests.

This code was generated from the OpenAPI documentation of 'Waylay Query: timeseries queries (v1 protocol)'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json
import re
from importlib.util import find_spec
from typing import Dict, Union

import pytest
from pytest_httpx import HTTPXMock
from typeguard import check_type
from waylay.sdk import ApiClient, WaylayClient
from waylay.sdk.api._models import Model
from waylay.services.queries.api import StatusApi
from waylay.services.queries.service import QueriesService

MODELS_AVAILABLE = (
    True if find_spec("waylay.services.queries.models") is not None else False
)

if MODELS_AVAILABLE:
    pass


# some mappings that are needed for some <example> interpolations
null, true, false = None, True, False


@pytest.fixture
def status_api(waylay_api_client: ApiClient) -> StatusApi:
    return StatusApi(waylay_api_client)


def test_registered(waylay_client: WaylayClient):
    """Test that StatusApi api is registered in the sdk client."""
    assert isinstance(waylay_client.queries.status, StatusApi)


def _get_set_mock_response(httpx_mock: HTTPXMock, gateway_url: str):
    mock_response = {"key": ""}
    httpx_mock_kwargs = {
        "method": "GET",
        "url": re.compile(f"^{gateway_url}/queries/v1/queries/v1(\\?.*)?"),
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)


@pytest.mark.asyncio
@pytest.mark.skipif(not MODELS_AVAILABLE, reason="Types not installed.")
async def test_get(service: QueriesService, gateway_url: str, httpx_mock: HTTPXMock):
    """Test case for get
    Get Version And Health
    """
    # set path params
    kwargs = {}
    _get_set_mock_response(httpx_mock, gateway_url)
    resp = await service.status.get(**kwargs)
    check_type(resp, Union[Dict[str, str],])


@pytest.mark.asyncio
@pytest.mark.skipif(MODELS_AVAILABLE, reason="Types installed.")
async def test_get_without_types(
    service: QueriesService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for get with models not installed
    Get Version And Health
    """
    # set path params
    kwargs = {}
    _get_set_mock_response(httpx_mock, gateway_url)
    resp = await service.status.get(**kwargs)
    check_type(resp, Model)
